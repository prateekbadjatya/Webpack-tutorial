const path = require("path");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const CopyPlugin = require("copy-webpack-plugin");
const { BundleAnalyzerPlugin } = require("webpack-bundle-analyzer");
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const webpack = require("webpack");

const { PurgeCSSPlugin } = require('purgecss-webpack-plugin')
const glob = require("glob");

const purgePath = {
  src: path.join(__dirname, "src"),
};
module.exports = {
  entry: {
    index: "./src/index.js",
    courses: "./src/pages/courses.js",
  },
  output: {
    // Even though the generated build works, the file names it uses is problematic. It doesn't allow to leverage client level cache efficiently as there's no way tell whether or not a file has changed. Cache invalidation can be
    // achieved by including a hash to the filenames.
    filename: "[name].[contenthash].js", //hashversion //help in browser caching
    path: path.resolve(__dirname, "dist"),
    clean: true,
  },
  devServer: {
    //auto reload and monitoring changes
    //script to be written in package.json
    // "dev": "webpack serve --mode development --open",
    static: "./dist",
  },
  module: {
    rules: [
      {
        test: /\.css$/,
        // use: ["style-loader", "css-loader"],
        use: [MiniCssExtractPlugin.loader, "css-loader"],
      },
      {
        test: /\.s[ac]ss$/,
        use: [MiniCssExtractPlugin.loader, "css-loader", "sass-loader"],
      },
      {
        test: /\.(png|jpe?g|gif|svg)$/i,
        type: "asset/resource",
      },
    ],
  },
  plugins: [
    new webpack.ProvidePlugin({
      //globally install plugin use any where using mnt keyword
      mnt: "moment", // value anme should match with package name present in package.json file
      $: "jquery",
    }),
    new HtmlWebpackPlugin({
      template: path.resolve(__dirname, "src/index.html"),
      //chunk is basically the entry point
      chunks: ["index"],
      inject: true,
      filename: "index.html",
    }),
    new HtmlWebpackPlugin({
      template: path.resolve(__dirname, "src/pages/courses.html"),
      //chunk is basically the entry point
      chunks: ["courses"],
      inject: true,
      filename: "courses.html",
    }),
    new CopyPlugin({
      //copy file
      patterns: [
        {
          from: path.resolve(__dirname, "src/assets/images/banner-image.png"),
          to: path.resolve(__dirname, "dist/assets/images"),
          context: "src",
        },
      ],
    }),
    //anaylze the bundle or optimize the bundle
    // new BundleAnalyzerPlugin({}),
    new MiniCssExtractPlugin(),
    //This plugin extracts CSS into separate files. It creates a CSS file per JS file which contains CSS. It supports On-Demand-Loading of CSS and SourceMaps.
    // avoid flickering of paage
    //-------------
    // new PurgeCSSPlugin({
    //   paths: glob.sync(`${purgePath.src}/**/*`, { nodir: true }),
    //   safelist: ["dummy-css"] //remove only css where class name .dummy-css
    // })

    //---
  ],
  optimization: {
    //move shared library into common build
    splitChunks: {
      chunks: "all",
    },
  },
};

/* 
Shiming:
The webpack compiler can understand modules written as ES2015 modules, CommonJS or AMD. However, some third party libraries may expect global dependencies (e.g. $ for jQuery). The libraries might also create globals which need to be exported.
In this case, you may only want to deliver 
those  to the browsers that need patching (i.e. load them on demand).


*/
